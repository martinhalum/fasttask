// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should render a FilledButton with undefined customColor and textColor 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#448AFF",
      "borderRadius": 8,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <View
    style={
      [
        {
          "alignItems": "center",
          "borderRadius": 15,
          "height": 30,
          "justifyContent": "center",
          "width": 30,
        },
        {
          "backgroundColor": "transparent",
        },
      ]
    }
  />
  <Text
    role="heading"
    style={
      {
        "color": undefined,
      }
    }
  >
    Test
  </Text>
  <View
    style={
      {
        "alignItems": "center",
        "borderRadius": 15,
        "height": 30,
        "justifyContent": "center",
        "width": 30,
      }
    }
  />
</View>
`;

exports[`Button should render a FilledButton with undefined leftIcon and rightIcon 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#448AFF",
      "borderRadius": 8,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <View
    style={
      [
        {
          "alignItems": "center",
          "borderRadius": 15,
          "height": 30,
          "justifyContent": "center",
          "width": 30,
        },
        {
          "backgroundColor": "transparent",
        },
      ]
    }
  />
  <Text
    role="heading"
    style={
      {
        "color": undefined,
      }
    }
  >
    Test
  </Text>
  <View
    style={
      {
        "alignItems": "center",
        "borderRadius": 15,
        "height": 30,
        "justifyContent": "center",
        "width": 30,
      }
    }
  />
</View>
`;

exports[`Button should render a FilledButton with undefined type 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#D9D9D9",
      "borderRadius": 8,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <View
    style={
      [
        {
          "alignItems": "center",
          "borderRadius": 15,
          "height": 30,
          "justifyContent": "center",
          "width": 30,
        },
        {
          "backgroundColor": "transparent",
        },
      ]
    }
  />
  <Text
    role="heading"
    style={
      {
        "color": undefined,
      }
    }
  >
    Test
  </Text>
  <View
    style={
      {
        "alignItems": "center",
        "borderRadius": 15,
        "height": 30,
        "justifyContent": "center",
        "width": 30,
      }
    }
  />
</View>
`;

exports[`Button should render a primary FilledButton with label and onPress function 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#448AFF",
      "borderRadius": 8,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <View
    style={
      [
        {
          "alignItems": "center",
          "borderRadius": 15,
          "height": 30,
          "justifyContent": "center",
          "width": 30,
        },
        {
          "backgroundColor": "transparent",
        },
      ]
    }
  />
  <Text
    role="heading"
    style={
      {
        "color": undefined,
      }
    }
  >
    Test
  </Text>
  <View
    style={
      {
        "alignItems": "center",
        "borderRadius": 15,
        "height": 30,
        "justifyContent": "center",
        "width": 30,
      }
    }
  />
</View>
`;

exports[`Button should render a submit Button with label and onPress function 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#00E676",
      "borderRadius": 8,
      "flexDirection": "row",
      "justifyContent": "center",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <Text
    style={
      {
        "color": "#000000",
        "fontSize": 18,
        "fontWeight": "600",
      }
    }
  >
    Test
  </Text>
</View>
`;

exports[`Button should render an outlined Button with label and onPress function 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "transparent",
      "borderColor": "#000000",
      "borderRadius": 8,
      "borderWidth": 0.5,
      "flexDirection": "row",
      "justifyContent": "center",
      "minHeight": 52,
      "opacity": 1,
      "padding": 14,
      "width": "100%",
    }
  }
>
  <Text
    style={
      {
        "color": "#000000",
      }
    }
  >
    Test
  </Text>
</View>
`;
